import { Layout } from "~/components/layout";
import { type NextPage } from "next";
import Head from "next/head";
("use client");

import { Button } from "~/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "~/components/ui/dialog";
import { Input } from "~/components/ui/input";
import { Label } from "~/components/ui/label";
import { type NodeRendererProps, Tree } from "react-arborist";
import { File, Folder, FolderOpen } from "lucide-react";
import { useEffect, useState } from "react";
import useSWR, { preload } from 'swr';

type nodeItem = {
  custom: {id:string},
  name: string;
  path: string;
  children?: nodeItem[];
};
type ResponseError = {
  message: string
}

// const data: nodeItem[] = [
//   { id: "1", name: "Unread", path: "/home"},
//   { id: "2", name: "Threads",path: "/ibira/scratch/eu" },
//   {
//     id: "3",
//     name: "Chat Rooms",
//     path: "/home/matheus/",
//     children: [
//       { id: "c1", name: "General", path: "/usr/id" },
//       { id: "c2", name: "Random", path: "/usr/local" },
//       { id: "c3", name: "Open Source Projects",path: "/passagem/secreta/hehe" },
//     ],
//   },
//   {
//     id: "4",
//     name: "Direct Messages",
//     path: "/chama/no/zap/fml",
//     children: [
//       { id: "d1", name: "Alice", path: "/oi/alice" },
//       { id: "d2", name: "Bob", path: "/vai/cagar/bob" },
//       { id: "d3", name: "Charlie", path: "/oiiiii" },
//     ],
//   },
// ];

function Node({ node, style, dragHandle }: NodeRendererProps<nodeItem>) {
  const Icon = node.isLeaf ? File : node.isOpen ? FolderOpen : Folder;

  return (
    <div style={style} ref={dragHandle} onClick={() => node.toggle()}>
      {node.isSelected ? (
        <div className="flex bg-slate-300  dark:bg-slate-600 rounded-sm">
          <Icon className="scale-90 pl-1"/>
          <span className="ml-1 pr-2">{node.data.name}</span>
        </div>
      ) : (
        <div className="flex">
          <Icon className="scale-75"/>
          <span className="ml-1">{node.data.name}</span>
        </div>
      )}
    </div>
  );
}

const fetcher = (url:string) => fetch(url).then((res) => res.json()).then((item:nodeItem)=> new Array<nodeItem>(item))


export function DialogDemo() {
  useEffect(() => {
    preload('/api/filesystem', fetcher)
  }, []);

  const [active, setActive] = useState("");
  
  const { data, isLoading } = useSWR<nodeItem[],ResponseError>('/api/filesystem', fetcher);
  
  console.log(data)
  
  if(isLoading)
    return <div>{"Loading.."}</div>;

  return (
    <Dialog>
      <DialogTrigger asChild>
        {data && <Button variant="outline">Load</Button>}
      </DialogTrigger>
      <DialogContent className="sm:max-w-[625px]">
        <DialogHeader>
          <DialogTitle>Edit profile</DialogTitle>
          <DialogDescription>
            {"Make changes to your profile here. Click save when you're done."}
          </DialogDescription>
        </DialogHeader>
        <div className="grid gap-4 py-4">
          <div className="flex items-center gap-4">
            <Label htmlFor="name" className="text-right">
              Active node:
            </Label>
            <Input id="active" disabled value={active} className="col-span-3" />
          </div>
          <div className="flex">
            <Tree
              idAccessor={(d) => d.custom.id}
              initialData={data}
              openByDefault={false}
              disableDrag={true}
              width={600}
              className="flex w-full h-full"
              rowClassName="flex w-full h-full"
              onActivate={(node) => setActive(node.data.path)}
            >
              {Node}
            </Tree>
          </div>
        </div>
        <DialogFooter>
          <Button className="w-full" type="submit">Select</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

const FirstSteps: NextPage = () => {
  return (
    <Layout>
      <Head>
        <title>First Steps</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center ">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight sm:text-[5rem]">
            Eu sou um{" "}
            <span className="text-[hsl(280,100%,70%)]">exemplinho</span>!
          </h1>
          <DialogDemo />
        </div>
      </main>
    </Layout>
  );
};
export default FirstSteps;
